import * as BT from '../../model/CoreTypes';
import FakeBrowserController, { fakeDisplayInfo } from '../../fake/FakeBrowserController';

interface WindowDescription {
	id: number;
	tabs: number;
}
export function createFakeBrowserController(windows: WindowDescription[] | BT.Window[]): FakeBrowserController {

	const ws = (isArrayOfWindows(windows)) ? windows : createWindowsFromDescr(windows);
	return new FakeBrowserController([fakeDisplayInfo], ws);
}

function isArrayOfWindows(windows: WindowDescription[] | BT.Window[]): windows is (BT.Window[]) {
	return windows.length > 0 && (<BT.Window> windows[0]).title !== undefined;
}

function createWindowsFromDescr(windows: WindowDescription[]): BT.Window[] {
	return windows.map(i => createWindowWithTabs(i.id, i.tabs));
}

export function expectEvents(callback: jest.Mock<{}>, expectedEvents: string[]) {
	expect(callback).toHaveBeenCalledTimes(expectedEvents.length);
	callback.mock.calls.forEach((c, i) => {
		expect(c[0]).toEqual(expectedEvents[i]);
	});
}

export function createWindowById(id: number): BT.Window {
	const w = BT.getNullWindow();
	w.bounds = { top: 0, left: 0, width: 10, height: 10 };
	w.id = id;
	return w;
}

export function createWindowWithTabs(id: number, tabs: number): BT.Window {

	return {
		...createWindowById(id),
		tabs: Array(tabs).fill('').map((t, i) => createTab(id + i + 1, t))
	};
}

export function createTab(id: number, url: string): BT.Tab {
	return {
		...BT.getNullTab(),
		id,
		url,
		visible: true
	};
}

export function _test(desc: string, test: Function) { /* */ }